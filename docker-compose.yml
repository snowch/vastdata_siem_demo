# superset has a separate docker-compose file
include:
- path: ./services/superset/docker-compose.yml

services:

  chroma:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: chroma
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
    restart: unless-stopped

  # Simplified Zeek monitoring using container's default network interface
  zeek-live:
    build:
      context: ./services/zeek-monitor
      dockerfile: Dockerfile
    container_name: zeek-live-monitor
    restart: unless-stopped
    volumes:
      - ./services/zeek-monitor/config:/config
      - ./services/zeek-monitor/logs:/logs
      - ./services/zeek-monitor/scripts:/scripts
    env_file: .env
    command: /scripts/zeek-live-monitor.sh
    # Use default bridge network instead of host networking
    networks:
      - zeek-network
    # Still need some capabilities for packet capture
    cap_add:
      - NET_ADMIN
      - NET_RAW
    # Enable promiscuous mode for packet capture
    privileged: true
    profiles:
      - simulator
      - all

  # Simplified traffic simulator using default networking
  siem-simulator:
    build:
      context: ./services/simulator
      dockerfile: Dockerfile
    container_name: siem-simulator
    restart: unless-stopped
    volumes:
      - ./services/simulator/src:/src/simulator
      - ./services/fluentd/logs:/logs
    env_file: .env
    ports:
      - "8080:8080"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      - zeek-network
    command: python3 /src/simulator/simulator_server.py
    profiles:
      - simulator
      - all

  fluentd:
    build:
      context: ./services/fluentd
      dockerfile: Dockerfile
    container_name: fluentd
    restart: unless-stopped
    image: fluentd:custom
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./services/fluentd/conf:/fluentd/etc
      - ./services/fluentd/logs:/logs
    environment:
      - FLUENTD_CONF=fluent.conf
    env_file: .env
    profiles:
      - simulator
      - all

  jupyspark:
    build:
      context: ./services/jupyspark/
      dockerfile: Dockerfile
      args:
        spark_version: "3.5.6"
        scala_version: "2.13"
    container_name: jupyspark
    restart: unless-stopped
    privileged: true
    env_file:
      - .env
    environment:
      - JUPYTER_PASSWORD=${JUPYTER_PASSWORD}
    ports:
      - "8888:8888"  # (Jupyter Notebook)
      - "4040:4040"  # (TensorBoard)
      - "4041:4041"  # (Spark UI)
      - "4042:4042"  # (Spark History Server)
    volumes:
      - ./services/jupyspark/examples:/home/jovyan/examples:rw
    profiles:
      - all

  bytewax-fluentd-etl:
    build:
      context: ./services/bytewax-etl
      dockerfile: Dockerfile
    container_name: bytewax-fluentd-etl
    restart: unless-stopped
    env_file: .env
    environment:
      - enable_raw_kafka_inspector=false
      - PYTHONPATH=\${PYTHONPATH}:/app/src
    volumes:
      - ./services/bytewax-etl/src:/app/src/
    command: ["python", "-m", "bytewax.run", "/app/src/fluentd_to_vastdb.py"]
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "5"
        compress: "true"
    profiles:
      - etl
      - all


  bytewax-zeek-etl:
    build:
      context: ./services/bytewax-etl
      dockerfile: Dockerfile
    container_name: bytewax-zeek-etl
    restart: unless-stopped
    env_file: .env
    environment:
      - enable_raw_kafka_inspector=false
    volumes:
      - ./services/bytewax-etl/src:/app/src/
    command: ["python", "-m", "bytewax.run", "/app/src/zeek_to_vastdb.py"]
    logging:
      driver: local
      options:
        max-size: "10m"
        max-file: "5"
        compress: "true"
    profiles:
      - etl
      - all

  trino_setup_config:
    container_name: trino_setup_config
    image: hairyhenderson/gomplate:latest
    working_dir: /workspace
    env_file:
      - .env
    volumes:
      - ./services/trino/templates:/workspace/templates
      - ./services/trino/generated:/workspace/output
    command: "-f /workspace/templates/vast.properties-template -o /workspace/output/vast.properties"
    profiles:
      - dashboard
      - all
      
  trino:
    container_name: trino
    image: vastdataorg/trino-vast:429
    # VASTDB -> TRINO_VERSION
    # 4.7    -> 375
    # 5.0    -> 420
    # 5.1    -> 429
    restart: unless-stopped
    depends_on:
      trino_setup_config:
        condition: service_completed_successfully
    mem_limit: 8g
    ports:
      - 18080:8080
    platform: linux/amd64
    env_file:
      - path: .env
    volumes:
      - ./services/trino/generated/vast.properties:/etc/trino/catalog/vast.properties:ro
      - ./services/trino/config.properties:/etc/trino/config.properties:ro
    healthcheck:
      # test: ["CMD", "trino", "--execute", "SELECT 'success'"]
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 30s
      retries: 10
    profiles:
      - dashboard
      - all

  dbt:
    image: python:3.11-slim
    container_name: dbt
    env_file:
      - .env
    environment:
      DBT_PROFILES_DIR: /dbt/profiles
    volumes:
      - ./services/dbt:/dbt
    working_dir: /dbt
    command: >
      bash -c "
        pip install dbt-trino &&
        while true; do
          dbt run --project-dir . &&
          dbt test --project-dir . ;
          echo 'Sleeping for 1 hour...';
          sleep 3600;
        done
      "
    depends_on:
      - trino
    restart: unless-stopped
    profiles:
      - all

  ai-agents:
    build:
      context: ./services/ai-agents
      dockerfile: Dockerfile
    container_name: ai-agents
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5000:5000" # Flask web UI
    profiles:
      - all

volumes:
  chroma_data:

networks:
  zeek-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24
